// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arab/types.proto

#ifndef PROTOBUF_arab_2ftypes_2eproto__INCLUDED
#define PROTOBUF_arab_2ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Arab {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_arab_2ftypes_2eproto();
void protobuf_AssignDesc_arab_2ftypes_2eproto();
void protobuf_ShutdownFile_arab_2ftypes_2eproto();

class ErrorCode;
class TunnelMsg;
class ErrResp;

enum ErrorCode_Code {
  ErrorCode_Code_OK = 0,
  ErrorCode_Code_TIME_OUT = 1,
  ErrorCode_Code_NOT_IMPL = 2
};
bool ErrorCode_Code_IsValid(int value);
const ErrorCode_Code ErrorCode_Code_Code_MIN = ErrorCode_Code_OK;
const ErrorCode_Code ErrorCode_Code_Code_MAX = ErrorCode_Code_NOT_IMPL;
const int ErrorCode_Code_Code_ARRAYSIZE = ErrorCode_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_Code_descriptor();
inline const ::std::string& ErrorCode_Code_Name(ErrorCode_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_Code_descriptor(), value);
}
inline bool ErrorCode_Code_Parse(
    const ::std::string& name, ErrorCode_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode_Code>(
    ErrorCode_Code_descriptor(), name, value);
}
// ===================================================================

class ErrorCode : public ::google::protobuf::Message {
 public:
  ErrorCode();
  virtual ~ErrorCode();
  
  ErrorCode(const ErrorCode& from);
  
  inline ErrorCode& operator=(const ErrorCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorCode& default_instance();
  
  void Swap(ErrorCode* other);
  
  // implements Message ----------------------------------------------
  
  ErrorCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorCode& from);
  void MergeFrom(const ErrorCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ErrorCode_Code Code;
  static const Code OK = ErrorCode_Code_OK;
  static const Code TIME_OUT = ErrorCode_Code_TIME_OUT;
  static const Code NOT_IMPL = ErrorCode_Code_NOT_IMPL;
  static inline bool Code_IsValid(int value) {
    return ErrorCode_Code_IsValid(value);
  }
  static const Code Code_MIN =
    ErrorCode_Code_Code_MIN;
  static const Code Code_MAX =
    ErrorCode_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    ErrorCode_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return ErrorCode_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return ErrorCode_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return ErrorCode_Code_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Arab.ErrorCode.Code error_code = 1 [default = OK];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::Arab::ErrorCode_Code error_code() const;
  inline void set_error_code(::Arab::ErrorCode_Code value);
  
  // @@protoc_insertion_point(class_scope:Arab.ErrorCode)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arab_2ftypes_2eproto();
  friend void protobuf_AssignDesc_arab_2ftypes_2eproto();
  friend void protobuf_ShutdownFile_arab_2ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ErrorCode* default_instance_;
};
// -------------------------------------------------------------------

class TunnelMsg : public ::google::protobuf::Message {
 public:
  TunnelMsg();
  virtual ~TunnelMsg();
  
  TunnelMsg(const TunnelMsg& from);
  
  inline TunnelMsg& operator=(const TunnelMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TunnelMsg& default_instance();
  
  void Swap(TunnelMsg* other);
  
  // implements Message ----------------------------------------------
  
  TunnelMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TunnelMsg& from);
  void MergeFrom(const TunnelMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Arab.ErrorCode error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::Arab::ErrorCode& error() const;
  inline ::Arab::ErrorCode* mutable_error();
  inline ::Arab::ErrorCode* release_error();
  
  // required string message_type = 2;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  inline const ::std::string& message_type() const;
  inline void set_message_type(const ::std::string& value);
  inline void set_message_type(const char* value);
  inline void set_message_type(const char* value, size_t size);
  inline ::std::string* mutable_message_type();
  inline ::std::string* release_message_type();
  
  // optional bytes message_content = 3;
  inline bool has_message_content() const;
  inline void clear_message_content();
  static const int kMessageContentFieldNumber = 3;
  inline const ::std::string& message_content() const;
  inline void set_message_content(const ::std::string& value);
  inline void set_message_content(const char* value);
  inline void set_message_content(const void* value, size_t size);
  inline ::std::string* mutable_message_content();
  inline ::std::string* release_message_content();
  
  // @@protoc_insertion_point(class_scope:Arab.TunnelMsg)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_message_content();
  inline void clear_has_message_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Arab::ErrorCode* error_;
  ::std::string* message_type_;
  ::std::string* message_content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_arab_2ftypes_2eproto();
  friend void protobuf_AssignDesc_arab_2ftypes_2eproto();
  friend void protobuf_ShutdownFile_arab_2ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TunnelMsg* default_instance_;
};
// -------------------------------------------------------------------

class ErrResp : public ::google::protobuf::Message {
 public:
  ErrResp();
  virtual ~ErrResp();
  
  ErrResp(const ErrResp& from);
  
  inline ErrResp& operator=(const ErrResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrResp& default_instance();
  
  void Swap(ErrResp* other);
  
  // implements Message ----------------------------------------------
  
  ErrResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrResp& from);
  void MergeFrom(const ErrResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Arab.ErrorCode error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::Arab::ErrorCode& error() const;
  inline ::Arab::ErrorCode* mutable_error();
  inline ::Arab::ErrorCode* release_error();
  
  // @@protoc_insertion_point(class_scope:Arab.ErrResp)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Arab::ErrorCode* error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_arab_2ftypes_2eproto();
  friend void protobuf_AssignDesc_arab_2ftypes_2eproto();
  friend void protobuf_ShutdownFile_arab_2ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ErrResp* default_instance_;
};
// ===================================================================


// ===================================================================

// ErrorCode

// required .Arab.ErrorCode.Code error_code = 1 [default = OK];
inline bool ErrorCode::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorCode::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorCode::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorCode::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::Arab::ErrorCode_Code ErrorCode::error_code() const {
  return static_cast< ::Arab::ErrorCode_Code >(error_code_);
}
inline void ErrorCode::set_error_code(::Arab::ErrorCode_Code value) {
  GOOGLE_DCHECK(::Arab::ErrorCode_Code_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// TunnelMsg

// required .Arab.ErrorCode error = 1;
inline bool TunnelMsg::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TunnelMsg::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TunnelMsg::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TunnelMsg::clear_error() {
  if (error_ != NULL) error_->::Arab::ErrorCode::Clear();
  clear_has_error();
}
inline const ::Arab::ErrorCode& TunnelMsg::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::Arab::ErrorCode* TunnelMsg::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::Arab::ErrorCode;
  return error_;
}
inline ::Arab::ErrorCode* TunnelMsg::release_error() {
  clear_has_error();
  ::Arab::ErrorCode* temp = error_;
  error_ = NULL;
  return temp;
}

// required string message_type = 2;
inline bool TunnelMsg::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TunnelMsg::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TunnelMsg::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TunnelMsg::clear_message_type() {
  if (message_type_ != &::google::protobuf::internal::kEmptyString) {
    message_type_->clear();
  }
  clear_has_message_type();
}
inline const ::std::string& TunnelMsg::message_type() const {
  return *message_type_;
}
inline void TunnelMsg::set_message_type(const ::std::string& value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void TunnelMsg::set_message_type(const char* value) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(value);
}
inline void TunnelMsg::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  message_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunnelMsg::mutable_message_type() {
  set_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    message_type_ = new ::std::string;
  }
  return message_type_;
}
inline ::std::string* TunnelMsg::release_message_type() {
  clear_has_message_type();
  if (message_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_type_;
    message_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes message_content = 3;
inline bool TunnelMsg::has_message_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TunnelMsg::set_has_message_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TunnelMsg::clear_has_message_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TunnelMsg::clear_message_content() {
  if (message_content_ != &::google::protobuf::internal::kEmptyString) {
    message_content_->clear();
  }
  clear_has_message_content();
}
inline const ::std::string& TunnelMsg::message_content() const {
  return *message_content_;
}
inline void TunnelMsg::set_message_content(const ::std::string& value) {
  set_has_message_content();
  if (message_content_ == &::google::protobuf::internal::kEmptyString) {
    message_content_ = new ::std::string;
  }
  message_content_->assign(value);
}
inline void TunnelMsg::set_message_content(const char* value) {
  set_has_message_content();
  if (message_content_ == &::google::protobuf::internal::kEmptyString) {
    message_content_ = new ::std::string;
  }
  message_content_->assign(value);
}
inline void TunnelMsg::set_message_content(const void* value, size_t size) {
  set_has_message_content();
  if (message_content_ == &::google::protobuf::internal::kEmptyString) {
    message_content_ = new ::std::string;
  }
  message_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunnelMsg::mutable_message_content() {
  set_has_message_content();
  if (message_content_ == &::google::protobuf::internal::kEmptyString) {
    message_content_ = new ::std::string;
  }
  return message_content_;
}
inline ::std::string* TunnelMsg::release_message_content() {
  clear_has_message_content();
  if (message_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_content_;
    message_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ErrResp

// required .Arab.ErrorCode error = 1;
inline bool ErrResp::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrResp::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrResp::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrResp::clear_error() {
  if (error_ != NULL) error_->::Arab::ErrorCode::Clear();
  clear_has_error();
}
inline const ::Arab::ErrorCode& ErrResp::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::Arab::ErrorCode* ErrResp::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::Arab::ErrorCode;
  return error_;
}
inline ::Arab::ErrorCode* ErrResp::release_error() {
  clear_has_error();
  ::Arab::ErrorCode* temp = error_;
  error_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Arab

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Arab::ErrorCode_Code>() {
  return ::Arab::ErrorCode_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_arab_2ftypes_2eproto__INCLUDED
